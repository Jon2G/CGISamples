@page "/TimeHandShake"
@using System.Threading
<h3>Comparar horas</h3>

<div style="display: flex;">
    <div style="display: grid;">
        <label style="font-weight: bold">Hora servidor:</label>
        <label>@DateTime.Now.ToLongDateString() - @DateTime.Now.ToLongTimeString()</label>
    </div>

    <div style="display: grid;">
        <label style="font-weight: bold">Hora cliente:</label>
        <label>@ClientDatetime.ToLongDateString() - @ClientDatetime.ToLongTimeString()</label>
    </div>




</div>

<div style="display: grid;">
    @if (DisplayDiff)
    {
        <label style="font-weight: bold">Diferencia entre horarios:</label>
        <label>@($"{Difference.Hours:N2}:{Difference.Minutes:N2}:{Difference.Seconds:N2}:{Difference.Milliseconds:N2}")</label>
    }
    <button @onclick="CompareTime">Comparar hora local</button>
</div>


<div style="display: grid;">
    <h3>Cambiar vocales</h3>
    <label style="font-weight: bold">Texto:</label>
    <textarea  cols="40" rows="5" @bind-value="Text" @bind-value:event="oninput" />

    <button @onclick="ChangeVowels">Cambiar vocales</button>
</div>


@code {

    [Inject]
    public IJSRuntime JsRuntime { get; set; }
    private Timer Timer { get; set; }
    private bool DisplayDiff { get; set; }
    private TimeSpan Difference { get; set; }
    private DateTime ClientDatetime { get; set; }
    public string Text { get; set; }
    public Random Random;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.Random = new Random();
        Timer = new Timer(
            (o) => InvokeStateHasChanged(),
            null,
            TimeSpan.FromSeconds(1),
            TimeSpan.FromSeconds(1));
    }

    private void InvokeStateHasChanged()
    {
        this.StateHasChanged();
    }

    private async Task CompareTime()
    {
        await Task.Yield();

        string stockSymbol = $"ABC";
        decimal price = 10;

        long gmt = await JsRuntime.InvokeAsync<long>("getTime");
        this.ClientDatetime = new DateTime(gmt);
        Difference = DateTime.UtcNow - ClientDatetime;
        DisplayDiff = true;
    }

    private void ChangeVowels()
    {
        if (string.IsNullOrEmpty(Text))
        {
            return;
        }

        char[] text = Text.ToArray();
        char[] vowels = new char[] { 'a', 'e', 'i', 'o', 'u', 'y' };
        for (int i = 0; i < text.Length; i++)
        {
            if (vowels.Contains(Text[i]))
            {
                text[i] = vowels[Random.Next(0, 5)];
            }
        }
        this.Text = string.Join("", text);
        this.InvokeStateHasChanged();
    }

}
